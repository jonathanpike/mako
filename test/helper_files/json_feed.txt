{
    "version": "https://jsonfeed.org/version/1",
    "title": "Jonathan Pike, software developer",
    "description": "The personal weblog of Jonathan Pike, exploring life as a software developer", 
    "home_page_url": "https://www.jonathanpike.net",
    "feed_url": "https://www.jonathanpike.net/feed.json",
    "items": [
      
        {
            "id": "https://www.jonathanpike.net/2017/03/Bootstrap-to-Neat",
            "title": "Migrating from Boostrap-Sass v3.3.5 to Neat 2.0.0",
            "date_published": "2017-03-06 11:34:00 -0500",
            "content_html": "<p>A long time ago, I opened an <a href=\"https://github.com/jonathanpike/jonathanpike.github.io/issues/2\">issue</a> that simply said:</p>\n\n<blockquote>\n  <p>SCSS features aren’t being used effectively. Needs refactoring.</p>\n</blockquote>\n\n<p>When I first started making my theme, I decided to use <a href=\"http://getbootstrap.com/\">Bootstrap</a> to speed up development. Bootstrap is a wonderful framework, making websites look great right out of the box.  Since it’s so full featured, it also included a lot of elements that I would never use for this site.  Why not explore some of Sass’ interesting features and remove what I didn’t need.</p>\n\n<p>I first took a baseline of how much code Bootstrap contributed:</p>\n\n<div class=\"language-sh highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"gp\">$ </span>cloc jonathanpike.github.io/\n     137 text files.\n     137 unique files.\n      79 files ignored.\n\nhttp://cloc.sourceforge.net v 1.60  <span class=\"nv\">T</span><span class=\"o\">=</span>0.94 s <span class=\"o\">(</span>101.9 files/s, 9558.7 lines/s<span class=\"o\">)</span>\n-------------------------------------------------------------------------------\nLanguage                     files          blank        comment           code\n-------------------------------------------------------------------------------\nSASS                            82           1245           1603           5822\nHTML                             9             34              3            179\nJavascript                       3              7              3             39\nXML                              1              0              0             30\nYAML                             1              6              7             26\n-------------------------------------------------------------------------------\nSUM:                            96           1292           1616           6096\n-------------------------------------------------------------------------------\n</code></pre>\n</div>\n<p>A whopping <strong>5822</strong> lines of Sass!  Some of that was my own code, but the vast majority was from Bootstrap.</p>\n\n<p>I decided to do the obvious thing and search <em>“lightweight grid framework”</em> on Google, and I found <a href=\"http://neat.bourbon.io/\">Neat</a> by Thoughtbot.  Neat uses Sass mixins instead of concrete classes, like Bootstrap.  This would be a great opportunity to learn more about Sass’ mixin system.  This also turned out to be the biggest learning curve.</p>\n\n<p><strong>The Container</strong></p>\n\n<p>The starting point for both Bootstrap and Neat is the grid container.  Bootstrap defines it through a class, either <code class=\"highlighter-rouge\">.container</code> for fixed-width grids or <code class=\"highlighter-rouge\">.container-fluid</code> for full-width grids. All of the options for the container are taken care of for you with either of those classes.  With Neat, I had to define my own container class (called <code class=\"highlighter-rouge\">.container</code>, which I carried over from Bootstrap) and then mix in Neats <code class=\"highlighter-rouge\">grid-container</code>:</p>\n\n<div class=\"language-sass highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"nc\">.container</span> <span class=\"err\">{</span>\n  <span class=\"k\">@include</span> <span class=\"nd\">grid-container</span><span class=\"err\">;</span>\n\n  <span class=\"k\">@media</span> <span class=\"n\">only</span> <span class=\"n\">screen</span> <span class=\"nf\">and</span> <span class=\"p\">(</span><span class=\"n\">min-width</span><span class=\"o\">:</span> <span class=\"m\">768px</span><span class=\"p\">)</span> <span class=\"err\">{</span>\n    <span class=\"nl\">max-width</span><span class=\"p\">:</span> <span class=\"m\">750px</span><span class=\"err\">;</span>\n  <span class=\"err\">}</span>\n\n  <span class=\"k\">@media</span> <span class=\"n\">only</span> <span class=\"n\">screen</span> <span class=\"nf\">and</span> <span class=\"p\">(</span><span class=\"n\">min-width</span><span class=\"o\">:</span> <span class=\"m\">992px</span><span class=\"p\">)</span> <span class=\"err\">{</span>\n    <span class=\"nl\">max-width</span><span class=\"p\">:</span> <span class=\"m\">970px</span><span class=\"err\">;</span>\n  <span class=\"err\">}</span>\n\n  <span class=\"k\">@media</span> <span class=\"n\">only</span> <span class=\"n\">screen</span> <span class=\"nf\">and</span> <span class=\"p\">(</span><span class=\"n\">min-width</span><span class=\"o\">:</span> <span class=\"m\">1200px</span><span class=\"p\">)</span> <span class=\"err\">{</span>\n    <span class=\"nl\">max-width</span><span class=\"p\">:</span> <span class=\"m\">1170px</span><span class=\"err\">;</span>\n  <span class=\"err\">}</span>\n\n  <span class=\"nl\">margin-left</span><span class=\"p\">:</span> <span class=\"nb\">auto</span><span class=\"err\">;</span>\n  <span class=\"nl\">margin-right</span><span class=\"p\">:</span> <span class=\"nb\">auto</span><span class=\"err\">;</span>\n<span class=\"err\">}</span>\n</code></pre>\n</div>\n\n<p><code class=\"highlighter-rouge\">grid-container</code> is super simple.  It adds the following to my <code class=\"highlighter-rouge\">.container::after</code> class:</p>\n\n<div class=\"language-sass highlighter-rouge\"><pre class=\"highlight\"><code>  <span class=\"nl\">clear</span><span class=\"p\">:</span> <span class=\"nb\">both</span><span class=\"err\">;</span>\n  <span class=\"nl\">content</span><span class=\"p\">:</span> <span class=\"s2\">\"\"</span><span class=\"err\">;</span>\n  <span class=\"nl\">display</span><span class=\"p\">:</span> <span class=\"nb\">block</span><span class=\"err\">;</span>\n</code></pre>\n</div>\n\n<p>I also added a few extra rules to keep the container in the centre of the page and make it not fill up the full width of the screen at different screen sizes.</p>\n\n<p><strong>The Columns</strong></p>\n\n<p>Bootstrap has several different classes for columns.  I was using <code class=\"highlighter-rouge\">col-xs-[x]</code> and <code class=\"highlighter-rouge\">col-md-[x]</code> to define columns for desktop and mobile.  My main content container (the one you’re reading in right now), for example, used <code class=\"highlighter-rouge\">col-xs-12 col-md-8</code> to make it span 8 of 12 columns on desktop and 12 of 12 columns on mobile.</p>\n\n<p>Neat, out of the box, doesn’t provide you with different sized columns defined by breakpoints for mobile, desktop, etc.  Instead, it provides you the tools to make those decisions for yourself.  This was the hardest part, for me, when I switched from Bootstrap to Neat.</p>\n\n<p>Neat’s default grid is defined as follows:</p>\n\n<div class=\"language-sass highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"nv\">$neat-grid</span><span class=\"p\">:</span> <span class=\"p\">(</span>\n  <span class=\"nl\">columns</span><span class=\"p\">:</span> <span class=\"m\">12</span><span class=\"o\">,</span>\n  <span class=\"na\">gutter</span><span class=\"p\">:</span> <span class=\"m\">20px</span><span class=\"o\">,</span>\n<span class=\"o\">);</span>\n</code></pre>\n</div>\n\n<p>I played around with it a little, and found that these settings were fine for my site.  Neat provides the <code class=\"highlighter-rouge\">grid-media</code> mixin function that allows you to define a custom Neat grid and use that to create a media query for different sized screens.  At first, I thought that I would use the default <code class=\"highlighter-rouge\">$neat-grid</code> for desktop and define a custom <code class=\"highlighter-rouge\">$mobile-neat-grid</code> for my mobile needs.  That ended up not working as I expected, although I realized later that my mistake was the order my media queries were in: media queries need to be ordered from smallest to biggest, but I was ordering from biggest to smallest. What I ended up doing was exactly the opposite.  I defined a <code class=\"highlighter-rouge\">$large-neat-grid</code> as follows:</p>\n\n<div class=\"language-sass highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"nv\">$large-neat-grid</span><span class=\"p\">:</span> <span class=\"p\">(</span>\n  <span class=\"na\">media</span><span class=\"p\">:</span> <span class=\"m\">1000px</span><span class=\"o\">,</span>\n<span class=\"o\">);</span>\n</code></pre>\n</div>\n\n<p>This just provided a media query breakpoint of 1000px, and didn’t change any of the default settings on <code class=\"highlighter-rouge\">$neat-grid</code>.  Next, wherever I used the Neat <code class=\"highlighter-rouge\">grid-column</code> mixin, I also used <code class=\"highlighter-rouge\">grid-media</code> to provide the media query for desktop.  Using the example of my main content container:</p>\n\n<div class=\"language-sass highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"nc\">.contentbox</span> <span class=\"err\">{</span>\n  <span class=\"k\">@include</span> <span class=\"nd\">grid-column</span><span class=\"p\">(</span><span class=\"m\">12</span><span class=\"p\">)</span><span class=\"err\">;</span>\n\n  <span class=\"k\">@include</span> <span class=\"nd\">grid-media</span><span class=\"p\">(</span><span class=\"nv\">$large-neat-grid</span><span class=\"p\">)</span><span class=\"err\">{</span>\n    <span class=\"k\">@include</span> <span class=\"nd\">grid-column</span><span class=\"p\">(</span><span class=\"m\">8</span><span class=\"p\">)</span><span class=\"err\">;</span>\n  <span class=\"err\">}</span>\n\n  <span class=\"nl\">margin-bottom</span><span class=\"p\">:</span> <span class=\"m\">20px</span><span class=\"err\">;</span>\n  <span class=\"nl\">padding</span><span class=\"p\">:</span> <span class=\"m\">0px</span> <span class=\"m\">30px</span> <span class=\"m\">0px</span> <span class=\"m\">30px</span><span class=\"err\">;</span>\n  <span class=\"k\">@media</span> <span class=\"n\">only</span> <span class=\"n\">screen</span> <span class=\"nf\">and</span> <span class=\"p\">(</span><span class=\"n\">max-width</span><span class=\"o\">:</span> <span class=\"m\">500px</span><span class=\"p\">)</span> <span class=\"err\">{</span>\n    <span class=\"nl\">padding</span><span class=\"p\">:</span> <span class=\"m\">0px</span><span class=\"err\">;</span>\n  <span class=\"err\">}</span>\n<span class=\"err\">}</span>\n</code></pre>\n</div>\n\n<p><code class=\"highlighter-rouge\">grid-media</code> wraps the <code class=\"highlighter-rouge\">grid-column</code> styles in a media query defined by the rules set for the custom <code class=\"highlighter-rouge\">$large-neat-grid</code> that I defined earlier.  Easy and clear.  The transition was made even easier because I had already defined classes on all of my main container elements, so I just had to add the Neat mixins to each of these to replicate the layout I had made with Bootstrap.</p>\n\n<p><strong>Other Styles</strong></p>\n\n<p>One thing I didn’t realize was how much Bootstrap defined things like font styles and spacing within divs.  When I removed it, the whole layout looked really weird.  After the initial shock, I got to work defining just the styles I needed to make the site look the way I wanted.  This was more work, involved more trial and error, but left me with a result that is much leaner and meaner.</p>\n\n<p><strong>Results</strong></p>\n\n<div class=\"language-sh highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"gp\">$ </span>cloc jonathanpike.github.io/\n      87 text files.\n      87 unique files.\n      79 files ignored.\n\nhttp://cloc.sourceforge.net v 1.60  <span class=\"nv\">T</span><span class=\"o\">=</span>0.79 s <span class=\"o\">(</span>58.1 files/s, 2393.9 lines/s<span class=\"o\">)</span>\n-------------------------------------------------------------------------------\nLanguage                     files          blank        comment           code\n-------------------------------------------------------------------------------\nSASS                            32            181            541            842\nHTML                             9             33              3            179\nJavascript                       3              7              3             39\nXML                              1              0              0             30\nYAML                             1              6              7             26\n-------------------------------------------------------------------------------\nSUM:                            46            227            554           1116\n-------------------------------------------------------------------------------\n</code></pre>\n</div>\n\n<p>From 5822 lines to 842 lines – an <strong>85%</strong> decrease!</p>\n\n<p><strong>Conclusions</strong></p>\n\n<p>Neat provides a, <em>ahem</em>, neat way of creating a grid based layout with Sass mixins.  I enjoyed learning how to use the library and cleaning up my Sass codebase to use more Sass features, such as variables. Neat just had a major upgrade, which dramatically simplified the API.  Read all about the changes <a href=\"https://robots.thoughtbot.com/building-the-future-of-floated-css-grids\">here</a>.</p>\n",
            "url": "https://www.jonathanpike.net/2017/03/Bootstrap-to-Neat"
        },
     
        {
            "id": "https://www.jonathanpike.net/2017/02/Unexplained-CSV-Whitespace",
            "title": "Unexplained CSV Whitespace",
            "date_published": "2017-02-27 09:30:00 -0500",
            "content_html": "<p><strong>TLDR</strong>: Blank lines in a <code class=\"highlighter-rouge\">.csv.erb</code> template render as whitespace in the final CSV output.</p>\n\n<p>Using the method I <a href=\"https://jonathanpike.net/2016/09/Exporting-CSV-From-Rails\">described</a> for exporting CSV, I created a new template and was testing it.  When I downloaded the CSV file and opened it, it appeared that the file was empty.  What was going on? I noticed that the scroll bar was rather long, so I started scrolling… and scrolling… and scrolling, down 1369 lines.  There’s the data. Then, I looked at the total lines in the file:  2738, which is double 1369.  It appears that, somewhere, I was inserting 1368 blank lines into the file prior to the data being written.</p>\n\n<p>I started debugging my <code class=\"highlighter-rouge\">.csv.erb</code> template to see where this whitespace was coming from.  First, I set a breakpoint in the template right before rendering the CSV.  Ruby’s CSV library wraps a string in a CSV object, and I could verify that the string had no whitespace.</p>\n\n<p>Next, I started removing elements from the CSV template until I found the culprit.  What I found was that an entire section of the CSV document was where the problem was happening. No matter what subsection of that section I removed, the issue would still persist.  If I removed the entire thing, the output would begin at line one.</p>\n\n<p>Finally, I decided to try something that I thought was crazy: I had defined a few variables in ERB tags earlier in the document, and I had inserted a blank line between each of these for readability.  What if I removed those?  The output began at line one. Bingo! Not so crazy after all!</p>\n\n<p>If you have more whitespace than you bargained for in CSV output and are using a <code class=\"highlighter-rouge\">.csv.erb</code> view template, check for blank lines. These could be the culprit.</p>\n",
            "url": "https://www.jonathanpike.net/2017/02/Unexplained-CSV-Whitespace"
        },
     
        {
            "id": "https://www.jonathanpike.net/2016/09/Exporting-CSV-From-Rails",
            "title": "Exporting CSV From Rails In Multiple Formats",
            "date_published": "2016-09-28 08:30:26 -0400",
            "content_html": "<p>Exporting data from Rails to be used in different applications can be a tricky topic.  What format do you need to export to?  What if one export needs some data and another export needs other data?  I had to solve exactly this problem with CSV.  Ruby has an excellent <a href=\"http://ruby-doc.org/stdlib-2.3.0/libdoc/csv/rdoc/CSV.html\">CSV Library</a> that is ripe for use with Rails.  From my research, there are 2 basic ways of exporting CSV data from a Rails application that I have come across so far:  <a href=\"https://www.lockyy.com/posts/rails-4/exporting-csv-files-in-rails\">calling <code class=\"highlighter-rouge\">to_csv</code> on a model object in the Controller</a> and <a href=\"http://nithinbekal.com/posts/rails-csv-export/\">generating CSV directly in the view</a>.</p>\n\n<p>Calling <code class=\"highlighter-rouge\">to_csv</code> is a great option if you only ever need the CSV data in one format.  My problem was more complex:  I needed to allow the user to choose what format the CSV data was exported in, and then provide it in that format.  To solve this problem, I chose to render the CSV in the view.  Here’s how I did it:</p>\n\n<p><strong>The Controller</strong></p>\n\n<p>Rails controller actions respond to HTML by default.  Luckly, setting up your controller to respond to CSV is really easy using <a href=\"http://api.rubyonrails.org/classes/ActionController/MimeResponds.html#method-i-respond_to\"><code class=\"highlighter-rouge\">ActionController::MimeResponds#respond_to</code></a>, as follows:</p>\n\n<div class=\"language-ruby highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"nf\">index</span>\n\t<span class=\"c1\"># Standard model queries here...</span>\n\t\n\t<span class=\"vi\">@template</span> <span class=\"o\">=</span> <span class=\"n\">params</span><span class=\"p\">[</span><span class=\"ss\">:template</span><span class=\"p\">]</span>\n\t\n\t<span class=\"n\">respond_to</span> <span class=\"k\">do</span> <span class=\"o\">|</span><span class=\"nb\">format</span><span class=\"o\">|</span>\n\t\t<span class=\"nb\">format</span><span class=\"p\">.</span><span class=\"nf\">html</span>\n\t\t<span class=\"nb\">format</span><span class=\"p\">.</span><span class=\"nf\">csv</span> <span class=\"p\">{</span> <span class=\"n\">render</span> <span class=\"ss\">template: </span><span class=\"s2\">\"path/to/</span><span class=\"si\">#{</span><span class=\"vi\">@template</span><span class=\"si\">}</span><span class=\"s2\">\"</span> <span class=\"p\">}</span>\n\t<span class=\"k\">end</span> \n<span class=\"k\">end</span> \n</code></pre>\n</div>\n\n<p>The most important portion of the <code class=\"highlighter-rouge\">index</code> action is the <code class=\"highlighter-rouge\">@template</code> variable.  When the user chooses what format they would like the CSV exported as, the download link provides a param that tells the controller what  CSV template to render.</p>\n\n<p><strong>Bonus Tip:</strong> Optionally, you can also set the <code class=\"highlighter-rouge\">Content-Disposition</code> header to make the CSV file download automatically and set a file name, like so:</p>\n\n<div class=\"language-ruby highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"nb\">format</span><span class=\"p\">.</span><span class=\"nf\">csv</span> <span class=\"k\">do</span> \n\t<span class=\"n\">headers</span><span class=\"p\">[</span><span class=\"s1\">'Content-Disposition'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s2\">\"attachment;filename=Your-File-Name-Here.csv\"</span>\n\t<span class=\"n\">render</span> <span class=\"ss\">template: </span><span class=\"s2\">\"path/to/</span><span class=\"si\">#{</span><span class=\"vi\">@template</span><span class=\"si\">}</span><span class=\"s2\">\"</span>\n<span class=\"k\">end</span> \n</code></pre>\n</div>\n\n<p><strong>The View</strong></p>\n\n<p>Here’s where Ruby’s CSV Library comes in handy.  Create as many CSV templates (in <code class=\"highlighter-rouge\">csv.erb</code> format, so you can embed Ruby directly in the template) as you need and save them wherever it makes sense.  They will each look something like this (obviously, with variation in the data displayed):</p>\n\n<div class=\"language-ruby highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"o\">&lt;</span><span class=\"sx\">% export </span><span class=\"o\">=</span> <span class=\"no\">CSV</span><span class=\"p\">.</span><span class=\"nf\">generate</span><span class=\"p\">(</span><span class=\"s2\">\" \"</span><span class=\"p\">,</span> <span class=\"p\">{</span> <span class=\"ss\">headers: </span><span class=\"p\">[</span><span class=\"s2\">\"Array\"</span><span class=\"p\">,</span> <span class=\"s2\">\"Of\"</span><span class=\"p\">,</span> <span class=\"s2\">\"Headers\"</span><span class=\"p\">],</span> <span class=\"ss\">write_headers: </span><span class=\"kp\">true</span><span class=\"p\">,</span> <span class=\"ss\">encoding: </span><span class=\"s2\">\"UTF-8}) do |csv| %&gt; \n\t&lt;% csv.add_row data %&gt; \n&lt;% end %&gt;\n&lt;%= export.lstrip.html_safe %&gt; \n</span></code></pre>\n</div>\n\n<p>Let me explain what’s going on:</p>\n\n<ol>\n  <li>The <code class=\"highlighter-rouge\">export</code> variable is set to <a href=\"http://ruby-doc.org/stdlib-2.3.0/libdoc/csv/rdoc/CSV.html#method-c-generate\"><code class=\"highlighter-rouge\">CSV.generate</code></a>.  This is the method that will be generating the actual CSV string that the user has requested.</li>\n  <li><code class=\"highlighter-rouge\">CSV.generate</code> takes 2 arguments: a string and a hash of options.  I’ve passed a blank string and provided <code class=\"highlighter-rouge\">headers</code>, <code class=\"highlighter-rouge\">write_headers</code>, and <code class=\"highlighter-rouge\">encoding</code> as options. <code class=\"highlighter-rouge\">headers</code> is the content of the top row of your CSV file, and can be either an array of strings or a string separated by commas.  <code class=\"highlighter-rouge\">write_headers</code> specifies that the headers should be added to the CSV output (optional – <code class=\"highlighter-rouge\">false</code> by default).  <code class=\"highlighter-rouge\">encoding</code> allows you to specify an encoding for the file (also optional – I’ve chosen UTF-8).</li>\n  <li><code class=\"highlighter-rouge\">CSV.generate</code> takes a block, in which you pass in the rows you actually want to add to the output.  You can iterate over your data however you normally would in a view file in this block, and then pass the result to <code class=\"highlighter-rouge\">csv.add_row</code>.</li>\n  <li>I explicitly have not printed anything in the view file until the last line.  If the last line was left out, the CSV download would be a blank file.  This is optional (you can alternatively remove the <code class=\"highlighter-rouge\">export</code> variable and call <code class=\"highlighter-rouge\">CSV.generate</code> in <code class=\"highlighter-rouge\">&lt;%= %&gt;</code> tags).  I did it this way because:</li>\n</ol>\n\n<ul>\n  <li>My own CSV exports required that no blank lines be present in the export.  I am calling <code class=\"highlighter-rouge\">lstrip</code> because I found that a <code class=\"highlighter-rouge\">0A</code> (<code class=\"highlighter-rouge\">LF</code>) character was being prepended to my CSV string, inexplicably.</li>\n  <li>I am calling <code class=\"highlighter-rouge\">html_safe</code> to avoid HTML escaping in the output.  This should only be done if your data is known safe.</li>\n</ul>\n\n<p><strong>The Link</strong></p>\n\n<p>Now, when your user is given the option to select a CSV download, you can provide options that will provide the name of your CSV template to your controller.  I implemented this by using a <a href=\"http://api.rubyonrails.org/classes/ActionView/Helpers/FormTagHelper.html#method-i-select_tag\"><code class=\"highlighter-rouge\">select_tag</code></a> together with <a href=\"http://api.rubyonrails.org/classes/ActionView/Helpers/FormOptionsHelper.html#method-i-options_for_select\"><code class=\"highlighter-rouge\">options_for_select</code></a> that gathered the options from a Hash I provided.  You can use whatever method provides the correct param to your controller.</p>\n\n<p>In just a few lines of code, Ruby and Rails provide everything needed to create a very flexible CSV exporting system. Hope this helps with your CSV exporting needs!</p>\n",
            "url": "https://www.jonathanpike.net/2016/09/Exporting-CSV-From-Rails"
        },
     
        {
            "id": "https://www.jonathanpike.net/2016/08/Choosing-the-Firehose-Project",
            "title": "Choosing the Firehose Project",
            "date_published": "2016-08-21 12:27:26 -0400",
            "content_html": "<p>It’s been almost a year since I enrolled and started down the path to change my career with <a href=\"http://www.thefirehoseproject.com\">the Firehose Project</a>.  While I’ve talked about my experience <a href=\"https://jonathanpike.net/2016/06/Bootcamp-Student-to-Junior-Developer\">finding my first developer job</a>, I haven’t talked about why I chose the Firehose Project.</p>\n\n<p>Back in early 2015, I knew I wanted to transition my career into the tech industry, but I didn’t know exactly how.  I had just completed my <a href=\"https://certification.comptia.org/certifications/a\">CompTIA A+</a> certification, a process that made me realize I would prefer being a developer to being an IT professional.  The only problem: developers need to have a degree in Computer Science, right?  I couldn’t afford to go back to University for another 4 year degree in either time or money.  Shortly after desparing that I could never become a developer, something amazing happened:  I was introduced to programming bootcamps.</p>\n\n<p>I attended an info session for <a href=\"https://www.bloc.io\">Bloc</a> in April 2015 that really pumped me up.  I could become a developer without having to spend 4 years in Univeristy and tens of thousands of dollars on tuition!  My son was just 1.5 months old at this point, and he needed the time that I would otherswise have to spend working on bootcamp curriculum.  I promised myself I would join a bootcamp in September 2015, when my son would be 6 months old.  I spent the intervening months researching the bootcamp I would join.  <a href=\"http://learntocodewith.me/posts/online-coding-bootcamps/\">The Most Epic Guide to Online Coding Bootcamps, Ever</a> by <a href=\"http://learntocodewith.me/about/\">Laurence Bradford</a> coupled with <a href=\"https://www.coursereport.com\">Course Report</a> helped me make a difficult call.  While many other bootcamps seemed like they were good, the Firehose Project stood out because they taught algorithms in addition to the regular Rails curriculum. In the end, I chose Firehose because:</p>\n\n<ol>\n  <li>The curriculum covered computer science fundamentals in addition to web development, keeping the changing framework material grounded in unchanging fundamental material and giving me a deeper understanding of how the frameworks work;</li>\n  <li>The time commitment (15 weeks, at that time) was shorter than other bootcamps, but didn’t skimp on ground covered; and</li>\n  <li>The price ($4,000, at that time) was more affordable than other bootcamps.</li>\n</ol>\n\n<p>During my 15 weeks, I learned a ton at a surprising pace: literally drinking from a firehose.  Some of the best moments include:</p>\n\n<ol>\n  <li>\n    <p>Building the first tutorial application, <a href=\"https://splurty-jonathan-pike.herokuapp.com\">Splurty</a>. Firehose is set up to give you quick wins, providing motivation to continue learning.  It felt so good getting my development environment set up, generating a new Rails application, writing my first MVC code, typing <code class=\"highlighter-rouge\">rails server</code>, and seeing the results instantly in my browser.  Even more so when I could share what I built after getting it running on Heroku.</p>\n  </li>\n  <li>\n    <p>The sessions I had with my mentor, <a href=\"http://www.jefferydurand.com\">Jeff</a>, were informative, challenging, and really, really fun.  I prepared questions throughout the week as I went through the course material, and Jeff would go over everything with me on Sunday evenings.  He went out of his way to be helpful to me, often going over the alloted 1 hour time period we had.  Jeff is a really great mentor and developer – he never ceased to amaze me with his deep knowledge of practically any question that I could throw at him.  I can trace many of my major successes to our sessions.  I’m sure that the other Firehose mentors are of equal caliber.</p>\n  </li>\n  <li>\n    <p>The group project at the end of the program was worth the cost of the entire course.  Being put into a group of 4 other developers and told to build a <a href=\"http://endgame-chess.herokuapp.com\">chess application</a> from scratch together was an awesome experience.  From going deeper into the Rails API and building out a database structure (including using <a href=\"http://eewang.github.io/blog/2013/03/12/how-and-when-to-use-single-table-inheritance-in-rails/\">single table inheritance</a>), to pair programming with multiple members of the team using <a href=\"https://screenhero.com\">Screenhero</a>, to solving complex problems and testing our solutions with TDD, this project had it all.  It really gave me the opportunity to stretch my new developer wings and gain the confidence necessary to be able to go out into the world and present myself as a capable junior developer when it came time to look for jobs. Our team mentor, Travis, was a fantastic teacher and obviously very passionate about coding, and the weekly standups we had with him were great.</p>\n  </li>\n</ol>\n\n<p>After graduation, I was supported by both Jeff and Travis, receiving feedback and advice about building my resume and how to ace the interview.  Just a few months later, I achieved my goal and became a professional developer.</p>\n\n<p>In the months since starting my job, I’ve learned a ton more and have improved my skills a hundredfold.  And because of the fantastic foundation that the Firehose Project gave me, I’m confident that I’ll continue to learn more and grow to be a better developer.</p>\n",
            "url": "https://www.jonathanpike.net/2016/08/Choosing-the-Firehose-Project"
        },
     
        {
            "id": "https://www.jonathanpike.net/2016/06/Bootcamp-Student-to-Junior-Developer",
            "title": "Bootcamp Student to Junior Developer",
            "date_published": "2016-06-22 21:04:05 -0400",
            "content_html": "<p>Going from feeling <a href=\"https://jonathanpike.net/2016/03/Not-Smart-Enough\">not smart enough to be a programmer</a> to being a <a href=\"http://www.thefirehoseproject.com/\">programming bootcamp</a> student was a big change.  Getting my development environment set up, starting the initial lessons, and becoming part of the Firehose Community all produced a sense of relief and joy.  I was finally on the path to becoming a developer!  Fast forward 15 weeks and I actually was a developer.  I had completed my assigned tasks on the group <a href=\"http://endgame-chess.herokuapp.com\">chess application</a> and felt very proud of the results. My next challenge was to face the great unknown: the job market for bootcamp graduates.</p>\n\n<p><strong>Resume</strong></p>\n\n<p>My first task was to polish up my resume and include my new programming knowledge and experience. I also decided to build a simple <a href=\"http://jonathanpike.net/resume/\">resume page</a> on this site to display it.  After all, I’m a web developer – making a page for my resume seemed like the obvious thing to do.  After completing my resume, I solicited feedback from my mentors.  That was a fantastic decision, and I encourage you to do the same.  Some of the advice that I got was:</p>\n\n<ol>\n  <li>\n    <p><strong>Remember your audience</strong>. A technical hiring manager is someone who is, at very least, familiar with things like Rails or a pull request, making explanations of such things unnecessary.  Don’t waste words (and space) on something that isn’t helping the hiring manager make a decision about whether you’re right for the job.</p>\n  </li>\n  <li>\n    <p><strong>Make it easy for the hiring manager</strong>.  Your resume is your first point of entry into an organization, not the end-all-be-all of you getting hired.  Pay attention to what the job requirements are and check as many of those boxes as you have skills and experience.  Make it easy for the hiring manager to move your resume to the yes pile for the next round.</p>\n  </li>\n  <li>\n    <p><strong>Be honest</strong>.  Don’t proclaim that you “know” something just because you’ve used it once, but don’t be afraid to say where your interests lie and what you’re currently learning.  Being a developer means you’re in for a career of constant learning and growing.  Show your curiosity.</p>\n  </li>\n  <li>\n    <p><strong>The more the merrier</strong>. Another great decision I made was to not limit myself to a single resume location.  I mirrored the information in my resume to <a href=\"https://ca.linkedin.com/in/pikejonathan\">LinkedIn</a> and <a href=\"http://stackoverflow.com/cv/jonathanpike\">Stack Overflow Careers</a>, allowing more potential employers to stumble accross one of my profiles.  One benefit of the latter was that it also produced a nice PDF to submit via e-mail, for employers who wanted that.</p>\n  </li>\n</ol>\n\n<p><strong>Job Hunting</strong></p>\n\n<p>Once my resume was ready, I took to looking for jobs.  My approach here was not very scientific: visit a few job boards daily that good companies advertised on, make a list of all the positions that sounded interesting, and apply to those positions on my list.  My favourite job boards were:</p>\n\n<ol>\n  <li><a href=\"http://stackoverflow.com/jobs\">Stack Overflow Jobs</a>.  This was my most used job board.  There are a lot of companies that post here every day and the filters are great.  If you create a profile, they will also match jobs with your interests and skills automatically.</li>\n  <li><a href=\"https://weworkremotely.com/\">We Work Remotely</a>.  This board is <em>the</em> board to look at for remote work.  There are fewer listings, but they’re all guaranteed to actually be hiring remotely.</li>\n  <li><a href=\"https://www.themuse.com/jobs\">The Muse Jobs</a>.  The “Filter Jobs” feature on this board is great to look at larger companies in your area.  The profiles they have of the companies you’re looking at are the best feature here.</li>\n</ol>\n\n<p>Around the time I started looking for a job, <a href=\"http://cobyism.com/remotejobseeker/\">The Complete Remote Jobseeker’s Handbook</a>, an eBook from <a href=\"https://github.com/cobyism\">Coby Chapple</a> (a designer at GitHub), was fortuitously released.  This eBook is filled with great information for seeking remote work, including the benefits (and curses) of being a remote worker, lists of high quality job boards to look for remote work, strategies for applying for jobs (this was applicable to any job hunting, remote or not), and interviewing tips.  My biggest takeaway from the book was that the interviewer <strong>wants you to succeed</strong>: finding and interviewing candidates is as much work for a company as applying and interviewing is for you.  If you’re the right person for the job, their work is over, as is yours.  It’s win-win!</p>\n\n<p>Another resource I found helpful was <a href=\"https://www.interviewcake.com\">Interview Cake</a>, a site that promises to teach you to be good at programming interviews.  While I didn’t actually face many technical challenges in the interviews I completed, this site was a great confidence booster as I realized that I was a better problem solver than I thought. And I learned a lot from the practice problems too!  Well worth the cost of admission.</p>\n\n<p><strong>Applying for Jobs</strong></p>\n\n<p>During my job hunt, I kept a detailed spreadsheet of the companies I applied for (including a copy of the job description, the date I applied, and the title of the job).  From late January to early April, I applied for <strong>23</strong> jobs, which lead to <strong>4</strong> interviews.  Early on, I spent a lot of time crafting a unique cover letter to each position I applied for, which meant that I was only applying to 2 positions a week (or less, depending on the time I had to spend on applications).  I asked <a href=\"https://github.com/kenmazaika\">Ken Mazaika</a> for some advice as I was going along, and he suggested I focus on a higher volume of applications, as (he estimated) that you have around a 10% chance of getting a response from companies for a junior role.  I took his advice and used the cover letters that I had already written to prepare a template.  This enabled me to apply to 5 or 6 a week (at peak).</p>\n\n<p>Of the interviews I had, <strong>2</strong> were telephone screens and <strong>2</strong> were in person interviews.  When it came to technical challenges, one of the telephone screens had me answering basic object oriented programming and responsive web design questions and one of the in person interviews had me filling out a general web development quiz.  I never had the dreaded whiteboard interview (whew!).  I was also given one take home assignment: building a simple <a href=\"http://wc-todo.herokuapp.com\">to do app</a> with the technology of my choice.</p>\n\n<p>A real surprise came when I was contacted on LinkedIn about a potential job opportunity – a company in Toronto was hiring Rails developers, and the recruiter noticed I had some experience with Ruby and Rails.  After a phone screen, 2 in person interviews, and a take home assignment, I was given a job offer from <a href=\"http://www.bioconnect.com\">BioConnect</a> to work on their Rails time and attendance application, <a href=\"http://www.teamworks.cloud\">TeamWorks</a>.  I accepted that offer and have been working on TeamWorks since the end of May.  My first month as a software developer has been better than I ever could have expected.  I work with a great team, I’ve been given the opportunity to learn a lot of new things, and I’m doing something that I really enjoy.</p>\n\n<p>If you’re currently in a bootcamp program, fear not about the great unknown of the job market.  You may face a lot of rejection (or be ignored) on the road to getting your first job, and you may feel out of your league at times.  Keep looking for the next big opportunity, keep seeking advice from mentors, and (most of all) keep coding!</p>\n",
            "url": "https://www.jonathanpike.net/2016/06/Bootcamp-Student-to-Junior-Developer"
        },
     
        {
            "id": "https://www.jonathanpike.net/2016/03/Not-Smart-Enough",
            "title": "I'm not smart enough to be a programmer.",
            "date_published": "2016-03-09 13:35:00 -0500",
            "content_html": "<p>That thought burned through my brain as I decided on a major for university.  I should have been a shoe in as a computer science major – I spent all of my free time noodling on my computer at home and I was one of (only) 4 students in my high school’s computer science class.  I was a classic computer nerd.  And I loved high school computer science class!  But my internal negative self-talk convinced me that I was no good at math and to be a computer science major (and a programmer), you needed to be “good at math”.  I instead chose to study business (pragmatically, for transferable skills) and political science (as an interest).</p>\n\n<p>Years later, I discovered <a href=\"https://www.codecademy.com\">Codecademy</a> and got started learning Python.  I chose Python simply because I had heard of it before. After completing all of what Codecademy had to offer, I realized that programming wasn’t insanely hard.  There were rules and patterns and syntax, but it was learnable.  And I wanted to learn more!  A lot of individuals on Stack Overflow and Reddit suggested <a href=\"http://learnpythonthehardway.org/\">Learn Python the Hard Way</a>, which I started but never really got into. Yet, I started thinking of myself as a programmer and deeply desired to learn more and get better.</p>\n\n<p>I knew that I couldn’t afford to go back to school, especially since I had (and still have) a young family, but I felt overwhelmed at the volume of knowledge that was out there to absorb.  Then I discovered coding bootcamps: organizations solely devoted to teaching new programmers the basic tools of the trade, preparing them to become capable junior developers.  I did some research, settled on <a href=\"thefirehoseproject.com\">The Firehose Project</a> and didn’t look back.</p>\n\n<p>For anyone out there who is thinking of becoming a programmer but has the nagging thought <em>“but I’m not smart enough”</em>, let me be the first to tell you that you <em>are</em> smart enough.  Computer science is an incredibly broad field.  Not every programmer is devoted to discovering new algorithms and optimizing the speed of compilers.  But if that’s something that you find you enjoy, its something you can devote your entire career too.</p>\n\n<p>My biggest piece of advice for anyone interested: just get started programming!  You’ll quickly discover 2 things:</p>\n\n<ol>\n  <li>Do I like this?</li>\n  <li>If so, where is my niche?</li>\n</ol>\n\n<p>If you do end up liking programming, you’re on the start of a fun, frustrating, and ultimately rewarding path.</p>\n\n<p><strong>Further Listening</strong></p>\n\n<p>I was inspired to write this post after listening to <a href=\"https://www.relay.fm/radar/6\">Episode 6</a> of <a href=\"https://www.relay.fm/radar\">Under the Radar</a>, a weekly podcast from <a href=\"marco.org\">Marco Arment</a> and <a href=\"https://david-smith.org/\">David Smith</a> about independant app development that’s never longer than 30 minutes.  I highly recommend listening to it.</p>\n",
            "url": "https://www.jonathanpike.net/2016/03/Not-Smart-Enough"
        },
     
        {
            "id": "https://www.jonathanpike.net/2016/02/Real-Time-Chess-Action-Cable",
            "title": "Real Time Chess with Action Cable",
            "date_published": "2016-02-26 06:17:26 -0500",
            "content_html": "<p>After having built a <a href=\"http://endgame-chess.herokuapp.com\">chess appliction</a> with a <a href=\"https://pusher.com/\">real time component</a>, this demo was right up my alley. The abstraction of channels and subscriptions (combined with JavaScript callbacks) will still take some getting used to, but I found the author did a good job of explaining everything in an understandable way.</p>\n\n<p>After reading <a href=\"https://samsaffron.com/archive/2015/12/29/websockets-caution-required\">Websockets, caution required!</a> from Sam Saffron, Websockets seem to have a lot of limitations, some of which are addressed by HTTP/2. It will be interesting to see how the real time landscape changes in the next few years.</p>\n",
            "url": "https://www.jonathanpike.net/2016/02/Real-Time-Chess-Action-Cable"
        },
     
        {
            "id": "https://www.jonathanpike.net/2016/02/Responding-to-Ajax",
            "title": "Responding to Ajax with Rails",
            "date_published": "2016-02-24 05:37:57 -0500",
            "content_html": "<p>After showing <a href=\"https://jonathanpike.net/2016/02/Ajax-on-Rails\">how easy it is to use Ajax with Rails</a> and <a href=\"https://jonathanpike.net/2016/02/Diving-into-jQuery-UJS\">how Rails makes Ajax easy behind the scenes</a>, the one thing left to explore is what Rails doesn’t do for you: responding to the Ajax request.</p>\n\n<p>When I last showed my <a href=\"http://wc-todo.herokuapp.com/\">To Do app</a>, I skipped responding to the Ajax request from the server using a trick:</p>\n\n<div class=\"language-javascript highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"s2\">\".my-form, #completed, .delete, .all-complete, .clear\"</span><span class=\"p\">).</span><span class=\"nx\">on</span><span class=\"p\">(</span><span class=\"s2\">\"ajax:success\"</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">e</span><span class=\"p\">,</span> <span class=\"nx\">data</span><span class=\"p\">,</span> <span class=\"nx\">status</span><span class=\"p\">,</span> <span class=\"nx\">xhr</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"nx\">location</span><span class=\"p\">.</span><span class=\"nx\">reload</span><span class=\"p\">();</span>\n<span class=\"p\">});</span>\n</code></pre>\n</div>\n\n<p>Using the <code class=\"highlighter-rouge\">ajax:success</code> callback, I reloaded the window to show the changes that were made by the Ajax request.  This required a reload for every action, which isn’t efficient.  This week, I went back to my application  and figured out how to properly have Rails respond to the Ajax request without a page reload.  This required changes to the Controller and the View.</p>\n\n<p><strong>The Controller</strong></p>\n\n<p>The Controller is responsible for receiving requests from the user and updating the model and view appropriately.  Since Ajax is making the request via JavaScript, the Controller needs to be able to respond back with JavaScript.  Here are the changes that I needed to make to my Controller to allow it to do just that, followed by an explanation of what’s happening:</p>\n\n<div class=\"language-ruby highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"k\">class</span> <span class=\"nc\">TodosController</span> <span class=\"o\">&lt;</span> <span class=\"no\">ApplicationController</span>\n  <span class=\"n\">respond_to</span> <span class=\"ss\">:js</span><span class=\"p\">,</span> <span class=\"ss\">:html</span><span class=\"p\">,</span> <span class=\"ss\">:json</span>\n  <span class=\"n\">before_action</span> <span class=\"ss\">:find_all</span>\n\n  <span class=\"p\">.</span><span class=\"nf\">.</span><span class=\"p\">.</span>\n\n  <span class=\"nf\">def</span> <span class=\"n\">create</span>\n    <span class=\"vi\">@todo</span> <span class=\"o\">=</span> <span class=\"no\">Todo</span><span class=\"p\">.</span><span class=\"nf\">new</span><span class=\"p\">(</span><span class=\"n\">todo_params</span><span class=\"p\">)</span>\n    <span class=\"n\">flash</span><span class=\"p\">[</span><span class=\"ss\">:alert</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s2\">\"Something went wrong. Please try again.\"</span> <span class=\"k\">unless</span> <span class=\"vi\">@todo</span><span class=\"p\">.</span><span class=\"nf\">save</span>\n    <span class=\"n\">respond_with</span> <span class=\"vi\">@todo</span>\n  <span class=\"k\">end</span>\n\n  <span class=\"p\">.</span><span class=\"nf\">.</span><span class=\"p\">.</span>\n\n  <span class=\"nf\">private</span>\n\n  <span class=\"k\">def</span> <span class=\"nf\">todo_params</span>\n    <span class=\"n\">params</span><span class=\"p\">.</span><span class=\"nf\">require</span><span class=\"p\">(</span><span class=\"ss\">:todo</span><span class=\"p\">).</span><span class=\"nf\">permit</span><span class=\"p\">(</span><span class=\"ss\">:title</span><span class=\"p\">,</span> <span class=\"ss\">:session_user_id</span><span class=\"p\">)</span>\n  <span class=\"k\">end</span>\n\n  <span class=\"p\">.</span><span class=\"nf\">.</span><span class=\"p\">.</span>\n\n  <span class=\"nf\">def</span> <span class=\"n\">find_all</span>\n    <span class=\"vi\">@todos</span> <span class=\"o\">=</span> <span class=\"no\">Todo</span><span class=\"p\">.</span><span class=\"nf\">where</span><span class=\"p\">(</span><span class=\"ss\">session_user_id: </span><span class=\"n\">session_user</span><span class=\"p\">).</span><span class=\"nf\">order</span><span class=\"p\">(</span><span class=\"ss\">created_at: :asc</span><span class=\"p\">)</span>\n  <span class=\"k\">end</span>\n<span class=\"k\">end</span>\n</code></pre>\n</div>\n\n<p>A few things to note:</p>\n\n<ol>\n  <li>In line 2, I’ve specified that the Controller can <code class=\"highlighter-rouge\">respond_to</code> HTML (a regular request), JavaScript, and JSON.  Setting <code class=\"highlighter-rouge\">respond_to</code> at the top of the Controller allows every action in the Controller to respond to those types of requests.</li>\n  <li>I also have a <code class=\"highlighter-rouge\">before_action</code> for the <code class=\"highlighter-rouge\">find_all</code> method (defined at the bottom of the controller), which is a helper method to load all of the current user’s To Dos from the database for each action.  You’ll see why this is important later.</li>\n  <li>I am using <code class=\"highlighter-rouge\">respond_with</code> in the <code class=\"highlighter-rouge\">create</code> action, which isn’t a standard Rails method (anymore).  Since Rails 4.2, the <a href=\"https://github.com/plataformatec/responders\">responders gem</a> has to be included in order to get this functionality.  <code class=\"highlighter-rouge\">respond_with</code> does 2 things:  1) it allows Rails to choose the type of response to send back automatically given the request, and 2) it is a convenient short form including the the following code in every action that needs to respond to something other than a normal request:</li>\n</ol>\n\n<div class=\"language-ruby highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"n\">respond_to</span> <span class=\"k\">do</span> <span class=\"o\">|</span><span class=\"nb\">format</span><span class=\"o\">|</span>\n  <span class=\"nb\">format</span><span class=\"p\">.</span><span class=\"nf\">html</span> <span class=\"p\">{</span> <span class=\"n\">redirect_to</span> <span class=\"n\">root_path</span><span class=\"p\">}</span>\n  <span class=\"nb\">format</span><span class=\"p\">.</span><span class=\"nf\">js</span>\n<span class=\"k\">end</span>\n</code></pre>\n</div>\n\n<p>Now that Rails knows how respond to JavaScript, we have to actually write the JavaScript to respond with.</p>\n\n<p><strong>The View</strong></p>\n\n<p>Rails expects a file in the views directory with the same name as the controller action and the same extension as the type of response.  To respond to the <code class=\"highlighter-rouge\">create</code> action with JavaScript, we need to make <code class=\"highlighter-rouge\">create.js.erb</code>:</p>\n\n<div class=\"language-javascript highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"s1\">'.todos'</span><span class=\"p\">).</span><span class=\"nx\">html</span><span class=\"p\">(</span><span class=\"s2\">\"&lt;%= j render partial: 'todos' %&gt;\"</span><span class=\"p\">)</span>\n\n<span class=\"o\">&lt;%</span> <span class=\"nx\">flash</span><span class=\"p\">.</span><span class=\"nx\">each</span> <span class=\"k\">do</span> <span class=\"o\">|</span><span class=\"nx\">type</span><span class=\"p\">,</span> <span class=\"nx\">message</span><span class=\"o\">|</span> <span class=\"o\">%&gt;</span>\n  <span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"s2\">\"#flash-messages\"</span><span class=\"p\">).</span><span class=\"nx\">append</span><span class=\"p\">(</span><span class=\"s2\">\"&lt;%= j content_tag :p, message.html_safe, class: \"</span><span class=\"nx\">flash</span> <span class=\"nx\">text</span><span class=\"o\">-</span><span class=\"nx\">center</span><span class=\"s2\">\" %&gt;\"</span><span class=\"p\">).</span><span class=\"nx\">delay</span><span class=\"p\">(</span><span class=\"mi\">3000</span><span class=\"p\">).</span><span class=\"nx\">fadeOut</span><span class=\"p\">(</span><span class=\"s2\">\"slow\"</span><span class=\"p\">);</span>\n<span class=\"o\">&lt;%</span> <span class=\"nx\">end</span> <span class=\"o\">%&gt;</span>\n</code></pre>\n</div>\n\n<p>Let me explain what is happening:</p>\n\n<ol>\n  <li>If the Ajax request is successful, the controller responds with this file, which will re-render the <a href=\"https://github.com/jonathanpike/wc-todo/blob/master/app/views/todos/_todos.html.erb\">todos partial</a>.  This is why I needed to have the <code class=\"highlighter-rouge\">before_action</code> in the controller load all of my todos from the database. The <code class=\"highlighter-rouge\">j</code> method is an alias for <a href=\"http://api.rubyonrails.org/classes/ActionView/Helpers/JavaScriptHelper.html#method-i-j\"><code class=\"highlighter-rouge\">escape_javascript</code></a>, which performs <a href=\"http://stackoverflow.com/a/1623813/5639584\">2 important functions when responding with JavaScript</a>.</li>\n  <li>If the Ajax request doesn’t pass validation (and therefore doesn’t save to the database), I’ve set <code class=\"highlighter-rouge\">flash[:alert]</code> to have a message.  The flash block will loop through the flash hash and then put the message in a <code class=\"highlighter-rouge\">p</code> tag (inside of a <code class=\"highlighter-rouge\">div</code> with the ID <code class=\"highlighter-rouge\">flash-messages</code>).  You’ll see I’ve set it to <code class=\"highlighter-rouge\">fadeOut</code> after 3 seconds (because the page won’t get refreshed to get rid of it).</li>\n</ol>\n\n<p><em>This is not the only way to write the response template</em>.  For example, you could append the individual new To Do to the to <code class=\"highlighter-rouge\">.todo-list</code> <code class=\"highlighter-rouge\">ul</code> instead of re-rendering the partial.</p>\n\n<p><strong>Putting it All Together</strong></p>\n\n<p>Here is the chain of events that happens when a To Do is added:</p>\n\n<ol>\n  <li>A user fills out the form and clicks the “Add New To Do” button.  This submits the form via Ajax (thanks <code class=\"highlighter-rouge\">remote: true</code>!).</li>\n  <li>The Todos Controller receives the request, and saves the To Do to the database (since it passes the validation).  It will also load all of the To Dos into the instance variable <code class=\"highlighter-rouge\">@todos</code> to be accessible in the view.  Then, it responds with the <code class=\"highlighter-rouge\">create.js.erb</code> view template.</li>\n  <li><code class=\"highlighter-rouge\">create.js.erb</code> renders the <code class=\"highlighter-rouge\">todos.html.erb</code> partial, which now includes the newly added To Do.  You now see your new To Do added to the page.</li>\n</ol>\n\n<p>All of this happened without the page being refreshed.  Awesome!</p>\n\n<p><strong>Further Reading</strong></p>\n\n<p>Figuring out how to respond from the server wasn’t intuitive to me, and involved a lot of trial and error.  Here are some of the resources I used to help me understand how this all works:</p>\n\n<ol>\n  <li><a href=\"https://www.alfajango.com/blog/rails-3-remote-links-and-forms/\">Alfa Jango - Rails 3 Remote Links and Forms: A Definitive Guide</a></li>\n  <li><a href=\"https://www.alfajango.com/blog/rails-3-remote-links-and-forms-data-type-with-jquery/\">Alfa Jango - Rails 3 Remote Links and Forms Part 2: Data-Type (with jQuery)</a></li>\n  <li><a href=\"http://code.tutsplus.com/tutorials/using-unobtrusive-javascript-and-ajax-with-rails-3--net-15243\">Tuts+ - Using Unobtrusive JavaScript and AJAX with Rails 3</a></li>\n  <li><a href=\"http://www.justinweiss.com/articles/respond-to-without-all-the-pain/\">Justin Weiss - <code class=\"highlighter-rouge\">respond_to</code> Without All the Pain</a></li>\n  <li><a href=\"http://edgeguides.rubyonrails.org/working_with_javascript_in_rails.html\">Rails Edge Guide - Working with JavaScript in Rails</a></li>\n</ol>\n",
            "url": "https://www.jonathanpike.net/2016/02/Responding-to-Ajax"
        },
     
        {
            "id": "https://www.jonathanpike.net/2016/02/Configuring-Cloudflare",
            "title": "CloudFlare’s Universal SSL",
            "date_published": "2016-02-19 19:25:17 -0500",
            "content_html": "<p>I immediately signed up for CloudFlare once I read this post.  It took about 5 minutes to set up, and about 3 hours to propagate through the DNS network.  CloudFlare backed sites also have the benefit of being <a href=\"https://www.nateberkopec.com/2016/01/07/what-http2-means-for-ruby-developers.html\">served with HTTP/2</a>. And did I mention that CloudFlare has a free plan?</p>\n",
            "url": "https://www.jonathanpike.net/2016/02/Configuring-Cloudflare"
        },
     
        {
            "id": "https://www.jonathanpike.net/2016/02/Diving-into-jQuery-UJS",
            "title": "Diving into jQuery-UJS",
            "date_published": "2016-02-17 05:11:06 -0500",
            "content_html": "<p><a href=\"http://jonathanpike.net/2016/02/Ajax-on-Rails\">Last week</a>, I gave a quick demonstration of how easy Ajax is with Rails.  Knowing to include <code class=\"highlighter-rouge\">remote: true</code> when using certain Rails helpers is only the first step.  In an effort to dispel the “magical” reputation that Rails has, I’m going to take a dive into <a href=\"https://github.com/rails/jquery-ujs\">jQuery-UJS</a> to show exactly how Rails makes Ajax so easy.</p>\n\n<p><strong>What is Unobtrusive JavaScript, Anyways?</strong></p>\n\n<p>First, a note about the name.  UJS in jQuery-UJS stands for “unobtrusive JavaScript”, which the <a href=\"http://edgeguides.rubyonrails.org/working_with_javascript_in_rails.html\">Rails Guide</a> tells me is generally regarded as a best practice for writing JavaScript.  Consider the following example<sup id=\"fnref:1\"><a href=\"#fn:1\" class=\"footnote\">1</a></sup>:</p>\n\n<div class=\"language-html highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;a</span> <span class=\"na\">href=</span><span class=\"s\">\"#\"</span> <span class=\"na\">onclick=</span><span class=\"s\">\"this.style.backgroundColor='#990000'\"</span><span class=\"nt\">&gt;</span>Paint it red<span class=\"nt\">&lt;/a&gt;</span>\n</code></pre>\n</div>\n\n<p>The background will change to red when the link is clicked, which is exactly what I want.  If I wanted to have another link do the same thing, however, I would have to copy the same inline JavaScript, which quickly would untenable to maintain and not DRY.</p>\n\n<p>Unobtrusive JavaScript has 2 main principals:</p>\n\n<ol>\n  <li>Separate JavaScript from HTML</li>\n  <li>Keep JavaScript DRY by passing information from HTML using data-* attributes.</li>\n</ol>\n\n<p>Here’s the same code as above, made unobtrusive:</p>\n\n<div class=\"language-coffeescript highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"vi\">@</span><span class=\"na\">paintIt</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"nx\">element</span><span class=\"p\">,</span> <span class=\"nx\">backgroundColor</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span>\n  <span class=\"nx\">element</span><span class=\"p\">.</span><span class=\"na\">style</span><span class=\"p\">.</span><span class=\"na\">backgroundColor</span> <span class=\"o\">=</span> <span class=\"nx\">backgroundColor</span>\n \n<span class=\"nx\">$</span> <span class=\"o\">-&gt;</span>\n  <span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"s\">\"a[data-background-color]\"</span><span class=\"p\">).</span><span class=\"na\">click</span> <span class=\"p\">(</span><span class=\"nx\">e</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span>\n    <span class=\"nx\">e</span><span class=\"p\">.</span><span class=\"na\">preventDefault</span><span class=\"p\">()</span>\n \n    <span class=\"nx\">backgroundColor</span> <span class=\"o\">=</span> <span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">).</span><span class=\"na\">data</span><span class=\"p\">(</span><span class=\"s\">\"background-color\"</span><span class=\"p\">)</span>\n    <span class=\"nx\">paintIt</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">,</span> <span class=\"nx\">backgroundColor</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<div class=\"language-html highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;a</span> <span class=\"na\">href=</span><span class=\"s\">\"#\"</span> <span class=\"na\">data-background-color=</span><span class=\"s\">\"#990000\"</span><span class=\"nt\">&gt;</span>Paint it red<span class=\"nt\">&lt;/a&gt;</span>\n<span class=\"nt\">&lt;a</span> <span class=\"na\">href=</span><span class=\"s\">\"#\"</span> <span class=\"na\">data-background-color=</span><span class=\"s\">\"#009900\"</span><span class=\"nt\">&gt;</span>Paint it green<span class=\"nt\">&lt;/a&gt;</span>\n<span class=\"nt\">&lt;a</span> <span class=\"na\">href=</span><span class=\"s\">\"#\"</span> <span class=\"na\">data-background-color=</span><span class=\"s\">\"#000099\"</span><span class=\"nt\">&gt;</span>Paint it blue<span class=\"nt\">&lt;/a&gt;</span>\n</code></pre>\n</div>\n\n<p>The JavaScript and HTML are separated, which makes both easier to maintain and change.  And with data-* elements, the background color attributes can be passed from the HTML to the JavaScript, allowing a single JavaScript function to change the background colour of any link to any colour the heart desires. And if I want to change the colour in the future, I simply change it in a single place.</p>\n\n<p><strong>jQuery-UJS and rails.js</strong></p>\n\n<p>jQuery-UJS is an “unobtrusive scripting adapter for jQuery” that provides the following features:</p>\n\n<ul>\n  <li>force confirmation dialogs for various actions;</li>\n  <li>make non-GET requests from hyperlinks;</li>\n  <li>make forms or hyperlinks submit data asynchronously with Ajax;</li>\n  <li>have submit buttons become automatically disabled on form submit to prevent double-clicking.</li>\n</ul>\n\n<p>The file that actually does all this is called <a href=\"https://github.com/rails/jquery-ujs/blob/master/src/rails.js\">rails.js</a>.  I’ve included snippets of code below, but please check out rails.js for yourself to explore deeper.</p>\n\n<p><strong>Confusing Elements in rails.js</strong></p>\n\n<p>As I was researching and writing this, I had to learn some interesting things about JavaScript and jQuery to understand what rails.js is doing.</p>\n\n<p>Rails.js starts by creating the <code class=\"highlighter-rouge\">$.rails</code> object.  You’ll note it’s defined like <code class=\"highlighter-rouge\">$.rails = rails = { ... };</code>.  This was a source of some confusion for me.  After testing a similar declaration out in the console, I figured that the double declaration allows both <code class=\"highlighter-rouge\">$.rails</code> and <code class=\"highlighter-rouge\">rails</code> to be used to reference the functions inside of the object.  I’m not sure why both are needed.</p>\n\n<p>You will also see some events with <code class=\"highlighter-rouge\">.rails</code> appended, like on this line defining what happens if the element is a form <em>(marked with arrows)</em>:</p>\n\n<div class=\"language-javascript highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"nx\">$document</span><span class=\"p\">.</span><span class=\"nx\">delegate</span><span class=\"p\">(</span><span class=\"nx\">rails</span><span class=\"p\">.</span><span class=\"nx\">formSubmitSelector</span><span class=\"p\">,</span> <span class=\"o\">-&gt;</span> <span class=\"s1\">'submit.rails'</span> <span class=\"o\">&lt;-</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">e</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<p>Where is the <code class=\"highlighter-rouge\">submit.rails</code> event defined?  As it turns out, there is no difference between the regular <code class=\"highlighter-rouge\">submit</code> event and the <code class=\"highlighter-rouge\">submit.rails</code> event, except that <code class=\"highlighter-rouge\">submit.rails</code> is namespaced.  As such, it can be unbound without unbinding the <code class=\"highlighter-rouge\">submit</code> event.  Handy!</p>\n\n<p><strong>The <code class=\"highlighter-rouge\">$.rails</code> object</strong></p>\n\n<p>The <code class=\"highlighter-rouge\">$.rails</code> object defines all of the functions that the <a href=\"#bindings\">event bindings below</a> will use to work their Ajax magic.  Since the <code class=\"highlighter-rouge\">$.rails</code> object spans 344 lines, I’m not going to reproduce the whole thing here.  Instead, I’ll point out a few functions that help explain how a form is submitted by simply specifying <code class=\"highlighter-rouge\">remote: true</code>.</p>\n\n<p><a name=\"isRemote\"></a>\n<em>isRemote:</em></p>\n\n<p>Starting with <code class=\"highlighter-rouge\">remote: true</code> (which is processed into <code class=\"highlighter-rouge\">data-remote=\"true\"</code>), isRemote allows rails.js to check if the <code class=\"highlighter-rouge\">data-remote</code> attribute is set:</p>\n\n<div class=\"language-javascript highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"nx\">isRemote</span><span class=\"err\">:</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">element</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"k\">return</span> <span class=\"nx\">element</span><span class=\"p\">.</span><span class=\"nx\">data</span><span class=\"p\">(</span><span class=\"s1\">'remote'</span><span class=\"p\">)</span> <span class=\"o\">!==</span> <span class=\"kc\">undefined</span> <span class=\"o\">&amp;&amp;</span> <span class=\"nx\">element</span><span class=\"p\">.</span><span class=\"nx\">data</span><span class=\"p\">(</span><span class=\"s1\">'remote'</span><span class=\"p\">)</span> <span class=\"o\">!==</span> <span class=\"kc\">false</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre>\n</div>\n\n<p>If the <code class=\"highlighter-rouge\">data-remote</code> attribute is not undefined and not false, this function returns <code class=\"highlighter-rouge\">true</code>.</p>\n\n<p><a name=\"fire\"></a>\n<em>fire:</em></p>\n\n<p>The fire function checks if there is an event handler that changes the default behaviour of any of the <a href=\"https://github.com/rails/jquery-ujs/wiki/ajax\">custom events</a> that rails.js sets up.</p>\n\n<div class=\"language-javascript highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"nx\">fire</span><span class=\"err\">:</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">obj</span><span class=\"p\">,</span> <span class=\"nx\">name</span><span class=\"p\">,</span> <span class=\"nx\">data</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"kd\">var</span> <span class=\"nx\">event</span> <span class=\"o\">=</span> <span class=\"nx\">$</span><span class=\"p\">.</span><span class=\"nx\">Event</span><span class=\"p\">(</span><span class=\"nx\">name</span><span class=\"p\">);</span>\n  <span class=\"nx\">obj</span><span class=\"p\">.</span><span class=\"nx\">trigger</span><span class=\"p\">(</span><span class=\"nx\">event</span><span class=\"p\">,</span> <span class=\"nx\">data</span><span class=\"p\">);</span>\n  <span class=\"k\">return</span> <span class=\"nx\">event</span><span class=\"p\">.</span><span class=\"nx\">result</span> <span class=\"o\">!==</span> <span class=\"kc\">false</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre>\n</div>\n\n<p>This function takes an object, a name of an event, and some data, and tests to see if the event works.  Here’s how it works:</p>\n\n<ol>\n  <li><code class=\"highlighter-rouge\">$.Event(name)</code> creates a new <a href=\"https://api.jquery.com/category/events/event-object/\">Event Object</a>.</li>\n  <li><a href=\"http://api.jquery.com/trigger/\"><code class=\"highlighter-rouge\">.trigger()</code></a> calls the new Event Object on the object (in this case, the form element).  Interestingly, <code class=\"highlighter-rouge\">.trigger()</code> will pass on the extra parameters to the event handler, just as if the user naturally triggered the event, which makes it useful with custom Event Objects.</li>\n  <li>If the result of the event being triggered is true, the function returns true.</li>\n</ol>\n\n<p><a name=\"ajax\"></a>\n<em>ajax:</em></p>\n\n<p>The function that actually handles the Ajax request is incredibly simple:</p>\n\n<div class=\"language-javascript highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"nx\">ajax</span><span class=\"err\">:</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">options</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"k\">return</span> <span class=\"nx\">$</span><span class=\"p\">.</span><span class=\"nx\">ajax</span><span class=\"p\">(</span><span class=\"nx\">options</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre>\n</div>\n\n<p>It simply returns <a href=\"https://api.jquery.com/jQuery.ajax/\"><code class=\"highlighter-rouge\">jQuery.ajax</code></a> with an options object that will be defined in <a href=\"#handleRemote\">handleRemote</a>.</p>\n\n<p><a name=\"handleRemote\"></a>\n<em>handleRemote:</em></p>\n\n<p>If <code class=\"highlighter-rouge\">data-remote</code> is true, how does the data actually get submitted?  The handleRemote function, well, handles it<sup id=\"fnref:2\"><a href=\"#fn:2\" class=\"footnote\">2</a></sup>!</p>\n\n<div class=\"language-javascript highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"nx\">handleRemote</span><span class=\"err\">:</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">element</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"kd\">var</span> <span class=\"nx\">method</span><span class=\"p\">,</span> <span class=\"nx\">url</span><span class=\"p\">,</span> <span class=\"nx\">data</span><span class=\"p\">,</span> <span class=\"nx\">withCredentials</span><span class=\"p\">,</span> <span class=\"nx\">dataType</span><span class=\"p\">,</span> <span class=\"nx\">options</span><span class=\"p\">;</span>\n\n  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">rails</span><span class=\"p\">.</span><span class=\"nx\">fire</span><span class=\"p\">(</span><span class=\"nx\">element</span><span class=\"p\">,</span> <span class=\"s1\">'ajax:before'</span><span class=\"p\">))</span> <span class=\"p\">{</span>\n    <span class=\"nx\">withCredentials</span> <span class=\"o\">=</span> <span class=\"nx\">element</span><span class=\"p\">.</span><span class=\"nx\">data</span><span class=\"p\">(</span><span class=\"s1\">'with-credentials'</span><span class=\"p\">)</span> <span class=\"o\">||</span> <span class=\"kc\">null</span><span class=\"p\">;</span>\n    <span class=\"nx\">dataType</span> <span class=\"o\">=</span> <span class=\"nx\">element</span><span class=\"p\">.</span><span class=\"nx\">data</span><span class=\"p\">(</span><span class=\"s1\">'type'</span><span class=\"p\">)</span> <span class=\"o\">||</span> <span class=\"p\">(</span><span class=\"nx\">$</span><span class=\"p\">.</span><span class=\"nx\">ajaxSettings</span> <span class=\"o\">&amp;&amp;</span> <span class=\"nx\">$</span><span class=\"p\">.</span><span class=\"nx\">ajaxSettings</span><span class=\"p\">.</span><span class=\"nx\">dataType</span><span class=\"p\">);</span>\n\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">element</span><span class=\"p\">.</span><span class=\"nx\">is</span><span class=\"p\">(</span><span class=\"s1\">'form'</span><span class=\"p\">))</span> <span class=\"p\">{</span>\n      <span class=\"nx\">method</span> <span class=\"o\">=</span> <span class=\"nx\">element</span><span class=\"p\">.</span><span class=\"nx\">data</span><span class=\"p\">(</span><span class=\"s1\">'ujs:submit-button-formmethod'</span><span class=\"p\">)</span> <span class=\"o\">||</span> <span class=\"nx\">element</span><span class=\"p\">.</span><span class=\"nx\">attr</span><span class=\"p\">(</span><span class=\"s1\">'method'</span><span class=\"p\">);</span>\n      <span class=\"nx\">url</span> <span class=\"o\">=</span> <span class=\"nx\">element</span><span class=\"p\">.</span><span class=\"nx\">data</span><span class=\"p\">(</span><span class=\"s1\">'ujs:submit-button-formaction'</span><span class=\"p\">)</span> <span class=\"o\">||</span> <span class=\"nx\">element</span><span class=\"p\">.</span><span class=\"nx\">attr</span><span class=\"p\">(</span><span class=\"s1\">'action'</span><span class=\"p\">);</span>\n      <span class=\"nx\">data</span> <span class=\"o\">=</span> <span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"nx\">element</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">].</span><span class=\"nx\">elements</span><span class=\"p\">).</span><span class=\"nx\">serializeArray</span><span class=\"p\">();</span>\n      <span class=\"c1\">// memoized value from clicked submit button</span>\n      <span class=\"kd\">var</span> <span class=\"nx\">button</span> <span class=\"o\">=</span> <span class=\"nx\">element</span><span class=\"p\">.</span><span class=\"nx\">data</span><span class=\"p\">(</span><span class=\"s1\">'ujs:submit-button'</span><span class=\"p\">);</span>\n      <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">button</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"nx\">data</span><span class=\"p\">.</span><span class=\"nx\">push</span><span class=\"p\">(</span><span class=\"nx\">button</span><span class=\"p\">);</span>\n        <span class=\"nx\">element</span><span class=\"p\">.</span><span class=\"nx\">data</span><span class=\"p\">(</span><span class=\"s1\">'ujs:submit-button'</span><span class=\"p\">,</span> <span class=\"kc\">null</span><span class=\"p\">);</span>\n      <span class=\"p\">}</span>\n      <span class=\"nx\">element</span><span class=\"p\">.</span><span class=\"nx\">data</span><span class=\"p\">(</span><span class=\"s1\">'ujs:submit-button-formmethod'</span><span class=\"p\">,</span> <span class=\"kc\">null</span><span class=\"p\">);</span>\n      <span class=\"nx\">element</span><span class=\"p\">.</span><span class=\"nx\">data</span><span class=\"p\">(</span><span class=\"s1\">'ujs:submit-button-formaction'</span><span class=\"p\">,</span> <span class=\"kc\">null</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span> \n\n  <span class=\"p\">...</span>\n        \n    <span class=\"nx\">options</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n      <span class=\"na\">type</span><span class=\"p\">:</span> <span class=\"nx\">method</span> <span class=\"o\">||</span> <span class=\"s1\">'GET'</span><span class=\"p\">,</span> <span class=\"na\">data</span><span class=\"p\">:</span> <span class=\"nx\">data</span><span class=\"p\">,</span> <span class=\"na\">dataType</span><span class=\"p\">:</span> <span class=\"nx\">dataType</span><span class=\"p\">,</span>\n      <span class=\"c1\">// stopping the \"ajax:beforeSend\" event will cancel the ajax request</span>\n      <span class=\"na\">beforeSend</span><span class=\"p\">:</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">xhr</span><span class=\"p\">,</span> <span class=\"nx\">settings</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">settings</span><span class=\"p\">.</span><span class=\"nx\">dataType</span> <span class=\"o\">===</span> <span class=\"kc\">undefined</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n          <span class=\"nx\">xhr</span><span class=\"p\">.</span><span class=\"nx\">setRequestHeader</span><span class=\"p\">(</span><span class=\"s1\">'accept'</span><span class=\"p\">,</span> <span class=\"s1\">'*/*;q=0.5, '</span> <span class=\"o\">+</span> <span class=\"nx\">settings</span><span class=\"p\">.</span><span class=\"nx\">accepts</span><span class=\"p\">.</span><span class=\"nx\">script</span><span class=\"p\">);</span>\n        <span class=\"p\">}</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">rails</span><span class=\"p\">.</span><span class=\"nx\">fire</span><span class=\"p\">(</span><span class=\"nx\">element</span><span class=\"p\">,</span> <span class=\"s1\">'ajax:beforeSend'</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"nx\">xhr</span><span class=\"p\">,</span> <span class=\"nx\">settings</span><span class=\"p\">]))</span> <span class=\"p\">{</span>\n          <span class=\"nx\">element</span><span class=\"p\">.</span><span class=\"nx\">trigger</span><span class=\"p\">(</span><span class=\"s1\">'ajax:send'</span><span class=\"p\">,</span> <span class=\"nx\">xhr</span><span class=\"p\">);</span>\n        <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n          <span class=\"k\">return</span> <span class=\"kc\">false</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n      <span class=\"p\">},</span>\n      <span class=\"na\">success</span><span class=\"p\">:</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">data</span><span class=\"p\">,</span> <span class=\"nx\">status</span><span class=\"p\">,</span> <span class=\"nx\">xhr</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"nx\">element</span><span class=\"p\">.</span><span class=\"nx\">trigger</span><span class=\"p\">(</span><span class=\"s1\">'ajax:success'</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"nx\">data</span><span class=\"p\">,</span> <span class=\"nx\">status</span><span class=\"p\">,</span> <span class=\"nx\">xhr</span><span class=\"p\">]);</span>\n      <span class=\"p\">},</span>\n        <span class=\"na\">complete</span><span class=\"p\">:</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">xhr</span><span class=\"p\">,</span> <span class=\"nx\">status</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"nx\">element</span><span class=\"p\">.</span><span class=\"nx\">trigger</span><span class=\"p\">(</span><span class=\"s1\">'ajax:complete'</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"nx\">xhr</span><span class=\"p\">,</span> <span class=\"nx\">status</span><span class=\"p\">]);</span>\n      <span class=\"p\">},</span>\n        <span class=\"na\">error</span><span class=\"p\">:</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">xhr</span><span class=\"p\">,</span> <span class=\"nx\">status</span><span class=\"p\">,</span> <span class=\"nx\">error</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"nx\">element</span><span class=\"p\">.</span><span class=\"nx\">trigger</span><span class=\"p\">(</span><span class=\"s1\">'ajax:error'</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"nx\">xhr</span><span class=\"p\">,</span> <span class=\"nx\">status</span><span class=\"p\">,</span> <span class=\"nx\">error</span><span class=\"p\">]);</span>\n      <span class=\"p\">},</span>\n        <span class=\"na\">crossDomain</span><span class=\"p\">:</span> <span class=\"nx\">rails</span><span class=\"p\">.</span><span class=\"nx\">isCrossDomain</span><span class=\"p\">(</span><span class=\"nx\">url</span><span class=\"p\">)</span>\n      <span class=\"p\">};</span>\n\n    <span class=\"c1\">// Only pass url to `ajax` options if not blank</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">url</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"nx\">options</span><span class=\"p\">.</span><span class=\"nx\">url</span> <span class=\"o\">=</span> <span class=\"nx\">url</span><span class=\"p\">;</span> <span class=\"p\">}</span>\n\n    <span class=\"k\">return</span> <span class=\"nx\">rails</span><span class=\"p\">.</span><span class=\"nx\">ajax</span><span class=\"p\">(</span><span class=\"nx\">options</span><span class=\"p\">);</span>\n  <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"kc\">false</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">},</span>\n</code></pre>\n</div>\n\n<p>A rundown of the most important parts of this function:</p>\n\n<ol>\n  <li>handleRemote first checks to make sure you haven’t disabled ajax by seeing if <a href=\"#fire\"><code class=\"highlighter-rouge\">rails.fire</code></a> returns true when the <code class=\"highlighter-rouge\">ajax:before</code> event is triggered.  This allows you to stop the whole process, should you so choose.</li>\n  <li>handleRemote then collects data that it will need to actually perform that ajax request.  It checks for a <code class=\"highlighter-rouge\">method</code> (ie. HTTP verb) and <code class=\"highlighter-rouge\">URL</code> to submit to using <a href=\"https://api.jquery.com/data/#data2\"><code class=\"highlighter-rouge\">.data()</code></a>, which reads the specified data attributes from the element.  If they aren’t present, it defaults to the <code class=\"highlighter-rouge\">method</code> and <code class=\"highlighter-rouge\">action</code> attributes on the element, respectively.</li>\n  <li>Next, it build up a <code class=\"highlighter-rouge\">options</code> object to pass over to the Ajax function with a variety of standard Ajax options that immediately trigger custom Events (for your own event handlers to deal with).</li>\n  <li>Finally, the options object is passed onto <a href=\"#ajax\"><code class=\"highlighter-rouge\">rails.ajax</code></a> to actually perform the Ajax request.</li>\n</ol>\n\n<p><a name=\"bindings\"></a>\n<strong>Event Binding</strong></p>\n\n<p>The rest of rails.js deals with event binding for the various events that it helps with.  The binding that concerns forms is as follows:</p>\n\n<div class=\"language-javascript highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"nx\">$document</span><span class=\"p\">.</span><span class=\"nx\">delegate</span><span class=\"p\">(</span><span class=\"nx\">rails</span><span class=\"p\">.</span><span class=\"nx\">formSubmitSelector</span><span class=\"p\">,</span> <span class=\"s1\">'submit.rails'</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">e</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"kd\">var</span> <span class=\"nx\">form</span> <span class=\"o\">=</span> <span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">),</span>\n    <span class=\"nx\">remote</span> <span class=\"o\">=</span> <span class=\"nx\">rails</span><span class=\"p\">.</span><span class=\"nx\">isRemote</span><span class=\"p\">(</span><span class=\"nx\">form</span><span class=\"p\">),</span>\n    <span class=\"nx\">blankRequiredInputs</span><span class=\"p\">,</span>\n    <span class=\"nx\">nonBlankFileInputs</span><span class=\"p\">;</span>\n\n  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"nx\">rails</span><span class=\"p\">.</span><span class=\"nx\">allowAction</span><span class=\"p\">(</span><span class=\"nx\">form</span><span class=\"p\">))</span> <span class=\"k\">return</span> <span class=\"nx\">rails</span><span class=\"p\">.</span><span class=\"nx\">stopEverything</span><span class=\"p\">(</span><span class=\"nx\">e</span><span class=\"p\">);</span>\n\n  <span class=\"c1\">// Skip other logic when required values are missing or file upload is present</span>\n  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">form</span><span class=\"p\">.</span><span class=\"nx\">attr</span><span class=\"p\">(</span><span class=\"s1\">'novalidate'</span><span class=\"p\">)</span> <span class=\"o\">===</span> <span class=\"kc\">undefined</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">form</span><span class=\"p\">.</span><span class=\"nx\">data</span><span class=\"p\">(</span><span class=\"s1\">'ujs:formnovalidate-button'</span><span class=\"p\">)</span> <span class=\"o\">===</span> <span class=\"kc\">undefined</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"nx\">blankRequiredInputs</span> <span class=\"o\">=</span> <span class=\"nx\">rails</span><span class=\"p\">.</span><span class=\"nx\">blankInputs</span><span class=\"p\">(</span><span class=\"nx\">form</span><span class=\"p\">,</span> <span class=\"nx\">rails</span><span class=\"p\">.</span><span class=\"nx\">requiredInputSelector</span><span class=\"p\">,</span> <span class=\"kc\">false</span><span class=\"p\">);</span>\n      <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">blankRequiredInputs</span> <span class=\"o\">&amp;&amp;</span> <span class=\"nx\">rails</span><span class=\"p\">.</span><span class=\"nx\">fire</span><span class=\"p\">(</span><span class=\"nx\">form</span><span class=\"p\">,</span> <span class=\"s1\">'ajax:aborted:required'</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"nx\">blankRequiredInputs</span><span class=\"p\">]))</span> <span class=\"p\">{</span>\n        <span class=\"k\">return</span> <span class=\"nx\">rails</span><span class=\"p\">.</span><span class=\"nx\">stopEverything</span><span class=\"p\">(</span><span class=\"nx\">e</span><span class=\"p\">);</span>\n      <span class=\"p\">}</span>\n    <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n      <span class=\"c1\">// Clear the formnovalidate in case the next button click is not on a formnovalidate button</span>\n      <span class=\"c1\">// Not strictly necessary to do here, since it is also reset on each button click, but just to be certain</span>\n      <span class=\"nx\">form</span><span class=\"p\">.</span><span class=\"nx\">data</span><span class=\"p\">(</span><span class=\"s1\">'ujs:formnovalidate-button'</span><span class=\"p\">,</span> <span class=\"kc\">undefined</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">remote</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"nx\">nonBlankFileInputs</span> <span class=\"o\">=</span> <span class=\"nx\">rails</span><span class=\"p\">.</span><span class=\"nx\">nonBlankInputs</span><span class=\"p\">(</span><span class=\"nx\">form</span><span class=\"p\">,</span> <span class=\"nx\">rails</span><span class=\"p\">.</span><span class=\"nx\">fileInputSelector</span><span class=\"p\">);</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">nonBlankFileInputs</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"c1\">// Slight timeout so that the submit button gets properly serialized</span>\n      <span class=\"c1\">// (make it easy for event handler to serialize form without disabled values)</span>\n      <span class=\"nx\">setTimeout</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">(){</span> <span class=\"nx\">rails</span><span class=\"p\">.</span><span class=\"nx\">disableFormElements</span><span class=\"p\">(</span><span class=\"nx\">form</span><span class=\"p\">);</span> <span class=\"p\">},</span> <span class=\"mi\">13</span><span class=\"p\">);</span>\n      <span class=\"kd\">var</span> <span class=\"nx\">aborted</span> <span class=\"o\">=</span> <span class=\"nx\">rails</span><span class=\"p\">.</span><span class=\"nx\">fire</span><span class=\"p\">(</span><span class=\"nx\">form</span><span class=\"p\">,</span> <span class=\"s1\">'ajax:aborted:file'</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"nx\">nonBlankFileInputs</span><span class=\"p\">]);</span>\n\n      <span class=\"c1\">// Re-enable form elements if event bindings return false (canceling normal form submission)</span>\n      <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"nx\">aborted</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"nx\">setTimeout</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">(){</span> <span class=\"nx\">rails</span><span class=\"p\">.</span><span class=\"nx\">enableFormElements</span><span class=\"p\">(</span><span class=\"nx\">form</span><span class=\"p\">);</span> <span class=\"p\">},</span> <span class=\"mi\">13</span><span class=\"p\">);</span> <span class=\"p\">}</span>\n\n      <span class=\"k\">return</span> <span class=\"nx\">aborted</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"nx\">rails</span><span class=\"p\">.</span><span class=\"nx\">handleRemote</span><span class=\"p\">(</span><span class=\"nx\">form</span><span class=\"p\">);</span>\n    <span class=\"k\">return</span> <span class=\"kc\">false</span><span class=\"p\">;</span>\n\n  <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n    <span class=\"c1\">// Slight timeout so that the submit button gets properly serialized</span>\n    <span class=\"nx\">setTimeout</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">(){</span> <span class=\"nx\">rails</span><span class=\"p\">.</span><span class=\"nx\">disableFormElements</span><span class=\"p\">(</span><span class=\"nx\">form</span><span class=\"p\">);</span> <span class=\"p\">},</span> <span class=\"mi\">13</span><span class=\"p\">);</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">});</span>\n</code></pre>\n</div>\n\n<p>On form submit, this event handler is called. Here’s a rundown of what it does:</p>\n\n<ol>\n  <li>It checks the <code class=\"highlighter-rouge\">data-confirm</code> attribute (with the <code class=\"highlighter-rouge\">rails.allowAction</code> function, which will return true if no function stops it) to see if the action needs to be confirmed prior to proceeding.</li>\n  <li>Next, it checks for a <code class=\"highlighter-rouge\">novalidate</code> attribute, which indicates that the form is not validated upon submit.  If <code class=\"highlighter-rouge\">novalidate</code> is not present, it will check for blank inputs (with the <code class=\"highlighter-rouge\">rails.blankInputs</code> function).  If there are blank inputs, it will stop submission of the form.</li>\n  <li>Then it checks if <a href=\"#isRemote\"><code class=\"highlighter-rouge\">isRemote</code></a> is true. If so, it will check if there is a file input that has content in it.  This will allow you to implement a custom Ajax file upload method.</li>\n  <li>Finally, it uses <a href=\"#handleRemote\"><code class=\"highlighter-rouge\">handleRemote</code></a> to deal with the form submission, and returns false to cancel regular submission.</li>\n</ol>\n\n<p><strong>Conclusion</strong></p>\n\n<p>jQuery-UJS clearly does a lot in 534 lines.  But it’s not magic!  The next time you’re able to just write <code class=\"highlighter-rouge\">remote: true</code> to submit a form via Ajax, remember that rails.js is saving you a lot of time by being awesome.</p>\n\n<hr />\n\n<div class=\"footnotes\">\n  <ol>\n    <li id=\"fn:1\">\n      <p>All examples in this section taken from <a href=\"http://edgeguides.rubyonrails.org/working_with_javascript_in_rails.html\">this Rails Guide</a>.&nbsp;<a href=\"#fnref:1\" class=\"reversefootnote\">&#8617;</a></p>\n    </li>\n    <li id=\"fn:2\">\n      <p>I have excerpted this function (marked with <code class=\"highlighter-rouge\">...</code>) to just show how it works with forms, for the sake of brevity.&nbsp;<a href=\"#fnref:2\" class=\"reversefootnote\">&#8617;</a></p>\n    </li>\n  </ol>\n</div>\n",
            "url": "https://www.jonathanpike.net/2016/02/Diving-into-jQuery-UJS"
        }
     
    ]
}
